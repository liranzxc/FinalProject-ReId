# -*- coding: utf-8 -*-
"""FinalProject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1V5pgYFxuUwxiOg7D3zlqYixvA5FNf66K
"""

#
#

# install opencv
from builtins import Exception

"""#Final Project - Source Target"""

# installing python opencv 3.4.2.16 for SIFT
#
# !pip uninstall opencv-python
# !pip uninstall opencv-contrib-python
#
#
# !pip install opencv-contrib-python==3.4.2.16
#
# using opencv
import cv2
from AlgoritamKeyPoints import *
from Matchers import *
from utils.imagesUtils import Accuracy, resizeImage, ShowMatch
from utils.yolo import forward,initYolo

def fullPipeLine(net,labelPath,source, target):

    source = forward(net,source,labelPath)
    target = forward(net,target,labelPath)

    kpDesListS = KeyPointsBinary(source[0],1500)
    kpDesListT = KeyPointsBinary(target[0],1500)

    finalMatches = []
    for kpS,DesS in kpDesListS:
        for kpT,DesT in kpDesListT:
            try:
                matches = KazeMatcher(DesS, DesT)
                finalMatches.extend(matches)
            except Exception as err:
                print(err)

    kpFS = [ kp for kp,des in kpDesListS]
    kpFT = [ kp for kp,des in kpDesListT]
  #
  #  print(len(kpBinaryS), len(des), len(kpT), len(desT), len(matches))
  #   print(Accuracy(kpBinaryS, matches))
  #   print(Accuracy(kpBinaryT, matches))
    ShowMatch(source[0],kpFS,target[0],kpFT, finalMatches)


if __name__ == "__main__":
    """# import images"""
    #
    weightsPath = 'yolo-object-detection/yolo-coco/yolov3.weights'
    configPath = 'yolo-object-detection/yolo-coco/yolov3.cfg'
    labelPath = 'yolo-object-detection/yolo-coco/coco.names'
    net = initYolo(weightsPath,configPath)
    print("finish loading yolo ....")

    # image = cv2.imread('images/DSC_0057.JPG')
    #
    # croped = forward(net,image,labelPath)
    #
    # for i in croped:
    #     cv2.imshow("croped",i)
    #     key = cv2.waitKey(0)
    #     while key != ord('q'):
    #         pass


    source = cv2.imread('images/DSC_0057.JPG')

    target = cv2.imread('images/DSC_0057.JPG')

    target = resizeImage(target, 0.2)

    source = resizeImage(source, 0.2)

    fullPipeLine(net,labelPath,source, target)

    print("finish")
