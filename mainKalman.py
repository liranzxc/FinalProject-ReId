# -*- coding: utf-8 -*-
"""FinalProject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1V5pgYFxuUwxiOg7D3zlqYixvA5FNf66K
"""

#
#

# install opencv
from builtins import Exception

"""#Final Project - Source Target"""

# installing python opencv 3.4.2.16 for SIFT
#
# !pip uninstall opencv-python
# !pip uninstall opencv-contrib-python
#
#
# !pip install opencv-contrib-python==3.4.2.16
#
# using opencv
import cv2
from utils.yolo import forward, initYolo
import copy
from kalmanproject.tracker import Tracker

if __name__ == "__main__":
    """# import images"""
    #
    weightsPath = 'yolo-object-detection/yolo-coco/yolov3.weights'
    configPath = 'yolo-object-detection/yolo-coco/yolov3.cfg'
    labelPath = 'yolo-object-detection/yolo-coco/coco.names'
    net = initYolo(weightsPath, configPath)
    print("finish loading yolo ....")

    font = cv2.FONT_HERSHEY_SIMPLEX
    # fontScale
    fontScale = 1
    # Blue color in BGR
    color = (255, 0, 0)
    # Line thickness of 2 px
    thickness = 1
    # Create opencv video capture object
    cap = cv2.VideoCapture('re-id/videos/vtest.avi')
    # Create Object Detector
    # Create Object Tracker
    tracker = Tracker(160, 30, 5, 100)
    # Variables initialization
    skip_frame_count = 0
    track_colors = [(255, 0, 0), (0, 255, 0), (0, 0, 255), (255, 255, 0),
                    (0, 255, 255), (255, 0, 255), (255, 127, 255),
                    (127, 0, 255), (127, 0, 127)]
    pause = False

    # Infinite loop to process video frames
    while (True):
        # Capture frame-by-frame
        ret, frame = cap.read()
        # Make copy of original frame
        orig_frame = copy.copy(frame)

        # Skip initial frames that display logo
        if (skip_frame_count < 15):
            skip_frame_count += 1
            continue

        # Detect and return centeroids of the objects in the frame
        boxes = forward(net, frame, labelPath)

        # If centroids are detected then track them
        if len(boxes) > 0:

            for b in boxes:
                orig_frame = cv2.circle(orig_frame, (b[0][0], b[0][1]), 3, (255, 0, 0), 1)

            # Track object using Kalman Filter
            tracker.Update(boxes)

            # For identified object tracks draw tracking line
            # Use various colors to indicate different track_id
            for i in range(len(tracker.tracks)):
                if len(tracker.tracks[i].trace) > 1:
                    for j in range(len(tracker.tracks[i].trace) - 1):
                        # Draw trace line
                        x1 = tracker.tracks[i].trace[j][0][0]
                        y1 = tracker.tracks[i].trace[j][1][0]
                        x2 = tracker.tracks[i].trace[j + 1][0][0]
                        y2 = tracker.tracks[i].trace[j + 1][1][0]
                        clr = tracker.tracks[i].track_id % 9
                        cv2.line(frame, (int(x1), int(y1)), (int(x2), int(y2)),
                                 track_colors[clr], 2)
                    x1 = tracker.tracks[i].trace[0][0][0]
                    y1 = tracker.tracks[i].trace[0][1][0]
                    cv2.putText(frame, "id" + str(tracker.tracks[i].track_id), (int(x1), int(y1)), font, fontScale,
                                color, thickness)

            # Display the resulting tracking frame
            cv2.imshow('Tracking', frame)

        # Display the original frame
        cv2.imshow('Original', orig_frame)

        # Slower the FPS
        cv2.waitKey(50)

        # Check for key strokes
        k = cv2.waitKey(50) & 0xff
        if k == 27:  # 'esc' key has been pressed, exit program.
            break
        if k == 112:  # 'p' has been pressed. this will pause/resume the code.
            pause = not pause
            if (pause is True):
                print("Code is paused. Press 'p' to resume..")
                while (pause is True):
                    # stay in this loop until
                    key = cv2.waitKey(30) & 0xff
                    if key == 112:
                        pause = False
                        print("Resume code..!!")
                        break

    # When everything done, release the capture
    cap.release()
    cv2.destroyAllWindows()
